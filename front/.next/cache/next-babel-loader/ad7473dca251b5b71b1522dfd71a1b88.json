{"ast":null,"code":"import { all, fork, take, call, put, takeLatest, throttle, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post';\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    // call은 동기라서 결과를 기다리고 다음을 진행하지만, fork는 비동기로 결과를 기다리지 않고 바로 다음으로 넘어간다.\n    yield delay(1000);\n    yield put({\n      type: ADD_POST_SUCCESS\n      //data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post('/api/comment', data);\n}\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS\n      //data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n  //yield throttle('ADD_POST_REQUEST', addPost, 10000);\n  // throttle은 ddos공격 방지용으로 사용하기는 하지만 주로 백엔드 쪽에서 요청에 대한 중복 점검을 한다.\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n  //yield throttle('ADD_POST_REQUEST', addPost, 10000);\n  // throttle은 ddos공격 방지용으로 사용하기는 하지만 주로 백엔드 쪽에서 요청에 대한 중복 점검을 한다.\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","take","call","put","takeLatest","throttle","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPostAPI","data","post","addPost","action","type","err","response","addCommentAPI","addComment","watchAddPost","watchAddComment","postSaga"],"sources":["D:/1/React_Node/projectNodeBird/front/sagas/post.js"],"sourcesContent":["import { all, fork, take, call, put, takeLatest, throttle, delay } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE\r\n} from '../reducers/post'\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post',data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data);\r\n        // call은 동기라서 결과를 기다리고 다음을 진행하지만, fork는 비동기로 결과를 기다리지 않고 바로 다음으로 넘어간다.\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            //data: result.data\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post('/api/comment',data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        // const result = yield call(addCommentAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            //data: result.data\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n    //yield throttle('ADD_POST_REQUEST', addPost, 10000);\r\n    // throttle은 ddos공격 방지용으로 사용하기는 하지만 주로 백엔드 쪽에서 요청에 대한 중복 점검을 한다.\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n    //yield throttle('ADD_POST_REQUEST', addPost, 10000);\r\n    // throttle은 ddos공격 방지용으로 사용하기는 하지만 주로 백엔드 쪽에서 요청에 대한 중복 점검을 한다.\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,GAAG,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,oBAAoB;AAC5F,OAAOC,KAAK,MAAM,OAAO;AACzB,SACIC,gBAAgB,EAAEC,gBAAgB,EAAEC,gBAAgB,EACpDC,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,QAC1D,kBAAkB;AAGzB,SAASC,UAAU,CAACC,IAAI,EAAE;EACtB,OAAOR,KAAK,CAACS,IAAI,CAAC,WAAW,EAACD,IAAI,CAAC;AACvC;AAEA,UAAUE,OAAO,CAACC,MAAM,EAAE;EACtB,IAAI;IACA;IACA;IACA,MAAMZ,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMH,GAAG,CAAC;MACNgB,IAAI,EAAEV;MACN;IACJ,CAAC,CAAC;EACN,CAAC,CAAC,OAAOW,GAAG,EAAE;IACV,MAAMjB,GAAG,CAAC;MACNgB,IAAI,EAAET,gBAAgB;MACtBK,IAAI,EAAEK,GAAG,CAACC,QAAQ,CAACN;IACvB,CAAC,CAAC;EACN;AACJ;AAEA,SAASO,aAAa,CAACP,IAAI,EAAE;EACzB,OAAOR,KAAK,CAACS,IAAI,CAAC,cAAc,EAACD,IAAI,CAAC;AAC1C;AAEA,UAAUQ,UAAU,CAACL,MAAM,EAAE;EACzB,IAAI;IACA;IACA,MAAMZ,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMH,GAAG,CAAC;MACNgB,IAAI,EAAEP;MACN;IACJ,CAAC,CAAC;EACN,CAAC,CAAC,OAAOQ,GAAG,EAAE;IACV,MAAMjB,GAAG,CAAC;MACNgB,IAAI,EAAEN,mBAAmB;MACzBE,IAAI,EAAEK,GAAG,CAACC,QAAQ,CAACN;IACvB,CAAC,CAAC;EACN;AACJ;AAEA,UAAUS,YAAY,GAAG;EACrB,MAAMpB,UAAU,CAACI,gBAAgB,EAAES,OAAO,CAAC;EAC3C;EACA;AACJ;;AAEA,UAAUQ,eAAe,GAAG;EACxB,MAAMrB,UAAU,CAACO,mBAAmB,EAAEY,UAAU,CAAC;EACjD;EACA;AACJ;;AAEA,eAAe,UAAUG,QAAQ,GAAG;EAChC,MAAM3B,GAAG,CAAC,CACNC,IAAI,CAACwB,YAAY,CAAC,EAClBxB,IAAI,CAACyB,eAAe,CAAC,CACxB,CAAC;AACN"},"metadata":{},"sourceType":"module"}