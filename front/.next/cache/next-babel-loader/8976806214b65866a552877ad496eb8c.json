{"ast":null,"code":"import { all, form, take, call, put, takeLatest, throttle, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\n// const l = logIn({ type: 'LOG_IN_REQUEST', data: { id: 'learomero137@gmail.com'}})\n// l.next();\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    // call은 동기라서 결과를 기다리고 다음을 진행하지만, fork는 비동기로 결과를 기다리지 않고 바로 다음으로 넘어간다.\n    yield delay(1000);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: action.data\n      //data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    // call은 동기라서 결과를 기다리고 다음을 진행하지만, fork는 비동기로 결과를 기다리지 않고 바로 다음으로 넘어간다.\n    yield delay(1000);\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: action.data\n      //data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLogIn() {\n  yield takeLatest('LOG_IN_REQUEST', logIn);\n  //take는 event listener 역할을 하지만 1회용 이라는 단점이 있음 ( 1회 사용 후 사라짐)\n  // 그런 이유로 while(true) 혹은 taskEvery를 사용한다.\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"names":["all","form","take","call","put","takeLatest","throttle","delay","axios","logInAPI","data","post","logIn","action","type","err","response","logOutAPI","logOut","watchLogIn","watchLogOut","userSaga","fork"],"sources":["D:/1/React_Node/projectNodeBird/front/sagas/user.js"],"sourcesContent":["import { all, form, take, call, put, takeLatest, throttle, delay } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\n// const l = logIn({ type: 'LOG_IN_REQUEST', data: { id: 'learomero137@gmail.com'}})\r\n// l.next();\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        // const result = yield call(logInAPI, action.data);\r\n        // call은 동기라서 결과를 기다리고 다음을 진행하지만, fork는 비동기로 결과를 기다리지 않고 바로 다음으로 넘어간다.\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'LOG_IN_SUCCESS',\r\n            data: action.data,\r\n            //data: result.data\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: 'LOG_IN_FAILURE',\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/api/logout');\r\n}\r\n\r\n\r\nfunction* logOut() {\r\n    try {\r\n        // const result = yield call(logOutAPI);\r\n        // call은 동기라서 결과를 기다리고 다음을 진행하지만, fork는 비동기로 결과를 기다리지 않고 바로 다음으로 넘어간다.\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'LOG_OUT_SUCCESS',\r\n            data: action.data,\r\n            //data: result.data\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: 'LOG_OUT_FAILURE',\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction* watchLogIn() {\r\n    yield takeLatest('LOG_IN_REQUEST', logIn);\r\n    //take는 event listener 역할을 하지만 1회용 이라는 단점이 있음 ( 1회 사용 후 사라짐)\r\n    // 그런 이유로 while(true) 혹은 taskEvery를 사용한다.\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeLatest('LOG_OUT_REQUEST', logOut);\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n    ]);\r\n}"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,GAAG,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,oBAAoB;AAC5F,OAAOC,KAAK,MAAM,OAAO;AAGzB,SAASC,QAAQ,CAACC,IAAI,EAAE;EACpB,OAAOF,KAAK,CAACG,IAAI,CAAC,YAAY,EAAED,IAAI,CAAC;AACzC;;AAEA;AACA;;AAEA,UAAUE,KAAK,CAACC,MAAM,EAAE;EACpB,IAAI;IACA;IACA;IACA,MAAMN,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMH,GAAG,CAAC;MACNU,IAAI,EAAE,gBAAgB;MACtBJ,IAAI,EAAEG,MAAM,CAACH;MACb;IACJ,CAAC,CAAC;EACN,CAAC,CAAC,OAAOK,GAAG,EAAE;IACV,MAAMX,GAAG,CAAC;MACNU,IAAI,EAAE,gBAAgB;MACtBJ,IAAI,EAAEK,GAAG,CAACC,QAAQ,CAACN;IACvB,CAAC,CAAC;EACN;AACJ;AAEA,SAASO,SAAS,GAAG;EACjB,OAAOT,KAAK,CAACG,IAAI,CAAC,aAAa,CAAC;AACpC;AAGA,UAAUO,MAAM,GAAG;EACf,IAAI;IACA;IACA;IACA,MAAMX,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMH,GAAG,CAAC;MACNU,IAAI,EAAE,iBAAiB;MACvBJ,IAAI,EAAEG,MAAM,CAACH;MACb;IACJ,CAAC,CAAC;EACN,CAAC,CAAC,OAAOK,GAAG,EAAE;IACV,MAAMX,GAAG,CAAC;MACNU,IAAI,EAAE,iBAAiB;MACvBJ,IAAI,EAAEK,GAAG,CAACC,QAAQ,CAACN;IACvB,CAAC,CAAC;EACN;AACJ;AAGA,UAAUS,UAAU,GAAG;EACnB,MAAMd,UAAU,CAAC,gBAAgB,EAAEO,KAAK,CAAC;EACzC;EACA;AACJ;;AAEA,UAAUQ,WAAW,GAAG;EACpB,MAAMf,UAAU,CAAC,iBAAiB,EAAEa,MAAM,CAAC;AAC/C;AAGA,eAAe,UAAUG,QAAQ,GAAG;EAChC,MAAMrB,GAAG,CAAC,CACNsB,IAAI,CAACH,UAAU,CAAC,EAChBG,IAAI,CAACF,WAAW,CAAC,CACpB,CAAC;AACN"},"metadata":{},"sourceType":"module"}