{"ast":null,"code":"import { all, fork, take, call, put, takeLatest, throttle, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE } from '../reducers/user';\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    // call은 동기라서 결과를 기다리고 다음을 진행하지만, fork는 비동기로 결과를 기다리지 않고 바로 다음으로 넘어간다.\n    yield delay(1000);\n    yield put({\n      type: ADD_POST_SUCCESS\n      //data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n  //yield throttle('ADD_POST_REQUEST', addPost, 10000);\n  // throttle은 ddos공격 방지용으로 사용하기는 하지만 주로 백엔드 쪽에서 요청에 대한 중복 점검을 한다.\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","take","call","put","takeLatest","throttle","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","addPostAPI","data","post","addPost","action","type","err","response","watchAddPost","postSaga","watchAddComment"],"sources":["D:/1/React_Node/projectNodeBird/front/sagas/post.js"],"sourcesContent":["import { all, fork, take, call, put, takeLatest, throttle, delay } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE\r\n} from '../reducers/user'\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post',data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data);\r\n        // call은 동기라서 결과를 기다리고 다음을 진행하지만, fork는 비동기로 결과를 기다리지 않고 바로 다음으로 넘어간다.\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            //data: result.data\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n    //yield throttle('ADD_POST_REQUEST', addPost, 10000);\r\n    // throttle은 ddos공격 방지용으로 사용하기는 하지만 주로 백엔드 쪽에서 요청에 대한 중복 점검을 한다.\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,GAAG,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,oBAAoB;AAC5F,OAAOC,KAAK,MAAM,OAAO;AACzB,SACIC,gBAAgB,EAAEC,gBAAgB,EAAEC,gBAAgB,QACjD,kBAAkB;AAGzB,SAASC,UAAU,CAACC,IAAI,EAAE;EACtB,OAAOL,KAAK,CAACM,IAAI,CAAC,WAAW,EAACD,IAAI,CAAC;AACvC;AAEA,UAAUE,OAAO,CAACC,MAAM,EAAE;EACtB,IAAI;IACA;IACA;IACA,MAAMT,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMH,GAAG,CAAC;MACNa,IAAI,EAAEP;MACN;IACJ,CAAC,CAAC;EACN,CAAC,CAAC,OAAOQ,GAAG,EAAE;IACV,MAAMd,GAAG,CAAC;MACNa,IAAI,EAAEN,gBAAgB;MACtBE,IAAI,EAAEK,GAAG,CAACC,QAAQ,CAACN;IACvB,CAAC,CAAC;EACN;AACJ;AAIA,UAAUO,YAAY,GAAG;EACrB,MAAMf,UAAU,CAACI,gBAAgB,EAAEM,OAAO,CAAC;EAC3C;EACA;AACJ;;AAEA,eAAe,UAAUM,QAAQ,GAAG;EAChC,MAAMrB,GAAG,CAAC,CACNC,IAAI,CAACmB,YAAY,CAAC,EAClBnB,IAAI,CAACqB,eAAe,CAAC,CACxB,CAAC;AACN"},"metadata":{},"sourceType":"module"}